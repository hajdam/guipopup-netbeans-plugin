import java.nio.file.*
import org.gradle.util.VersionNumber
//import java.util.jar.Pack200
import java.util.zip.GZIPOutputStream
import java.util.jar.JarFile
import java.util.jar.JarOutputStream
import java.security.MessageDigest
import java.util.zip.ZipFile

buildscript {
    repositories {
        jcenter()
        flatDir {
            dirs "lib"
        }
    }
    dependencies {
        classpath "cz.kubacki.gradle.plugins:gradle-nbm-plugin:1.17.1-dev.6.uncommitted+3041178"
        gradleApi()
    }
}

['java', 'distribution', 'maven-publish', 'signing', 'cz.kubacki.nbm'].each {
    apply plugin: it
}

ext.scriptFile = { String fileName ->
    return new File(new File(rootDir, 'gradle'), fileName)
}

version = '0.1.3-SNAPSHOT'
group = 'org.exbin.utils.guipopup'

sourceCompatibility = '1.8'
targetCompatibility = sourceCompatibility

ext {
    //    netbeansVersion = 'dev-SNAPSHOT'
    netbeansVersion = 'RELEASE110'
    repositoryName = "guipopup-netbeans-plugin"
    nbmVersion = version.endsWith('-SNAPSHOT') ? version.substring(0, version.length() - 9) : version
    homePageUrl = 'https://github.com/hajdam/guipopup-netbeans-plugin'
    deployUrl = homePageUrl
    deployName = 'GUI Popup & Inspect'
    deployDescription = 'Registers popup menu and inspect function for all regular components in IDE'
}

//ext.packer = Pack200.newPacker()
//packer.properties()["pack.effort"] = "9"

repositories {
    mavenCentral()
    String nbRepo = netbeansVersion.endsWith('-SNAPSHOT')
    ? 'https://bits.netbeans.org/netbeans/trunk/new-maven-snapshot'
: 'https://bits.netbeans.org/nexus/content/groups/netbeans'
    maven { url nbRepo }
    maven { url 'https://repo.gradle.org/gradle/libs-releases-local' }
    jcenter()
    flatDir {
        dirs "lib"
    }
}

// apply plugin: 'nb-gradle-nbm'
// apply plugin: 'custom-java-compilers'
// apply plugin: 'nb-gradle-maven-publish'
// apply plugin: 'nbm-dependency-verifier'

compileJava.options.sourcepath = sourceSets.main.resources.sourceDirectories

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

def configureExec(task) {
    task.mainClass = mainClass
    task.classpath = sourceSets.main.runtimeClasspath
    if (hasProperty('appArgs')) {
        task.args appArgs
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    doFirst {
        options.fork = true
    }
}

// Disable tests on build
if (!gradle.startParameter.taskNames.any {it.endsWith("test")}) {
    tasks.withType(Test) {enabled = false}
}

task testJar(type: Jar, dependsOn: testClasses) {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'tests'
        base {
            archivesName = "test-${project.name}"
        }
    } else {
    	classifier = 'tests'
    	archiveName = "test-${project.archivesBaseName}"
    }
    from sourceSets.test.output
}

compileTestJava.dependsOn(jar)

//jar {
//    attributes(
////        'Main-Class': mainClass,
//        'Class-Path': manifestClassPath()
//    )
////    from sourceSets.modelBuilders.output
////    ext {
////        netBeansSourceSets = [sourceSets.main, sourceSets.modelBuilders]
////    }
//}

configurations {
    tests
}

javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.addBooleanOption('html5', true)
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'javadoc'
    } else {
    	classifier = 'javadoc'
    }
        
    from javadoc.destinationDir
}

//def tryGetProperty = { String name, String defaultValue ->
//    return org.netbeans.gradle.build.PropertyUtils.getStringProperty(project, name, defaultValue)
//}
//
//
jar.manifest {
    attributes(['OpenIDE-Module-Layer': 'org/exbin/utils/guipopup/layer.xml'])
}

task nbmFile (type: Jar, dependsOn: tasks.nbm) {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'nbm'
    } else {
    	classifier = 'nbm'
    }

//    from tasks.nbm.outputFile
}

def packGZ(File jarToPack) {
    println jarToPack.getAbsolutePath()
    def targetPath = project.buildDir.getAbsolutePath() + "/libs"
    def name = jarToPack.getName()
    def newName = name.substring(0, name.length() - 4) + ".jar.pack.gz"
    def newFile = new File(targetPath, newName)
    def os = new GZIPOutputStream(new FileOutputStream(newFile))
    packer.pack new JarFile(jarToPack), os
    os.close()
    
    def messageDigest = MessageDigest.getInstance("SHA1")
    newFile.eachByte 1024 * 1024, { byte[] buf, int bytesRead ->
        messageDigest.update(buf, 0, bytesRead);
    }
    def sha1Hex = new BigInteger(1, messageDigest.digest()).toString(16).padLeft(40, '0')
    def shaName = name.substring(0, name.length() - 4) + ".jar.pack.gz.sha1"
    def shaFile = new File(targetPath, shaName)
    if (!shaFile.exists()) shaFile.createNewFile()
    shaFile.append sha1Hex
}

task nbmPack (type: Jar, dependsOn: jar) {
    dependsOn nbmFile
    doLast {
        jar.outputs.files.each { packGZ(it) }
        from configurations.runtime.findAll { !configurations.providedCompile.contains(it) }.each { packGZ(it) }
        //        packGZ(tasks.nbm.outputFile)
    }
}

nbm {
    moduleAuthor = 'ExBin Project'
    licenseFile = 'LICENSE.txt'
    homePage = ext.homePageUrl
    moduleName = group
    specificationVersion = ext.nbmVersion
    implementationVersion = ext.nbmVersion
    moduleInstall = 'org/exbin/utils/guipopup/Installer'
    localizingBundle = 'org/exbin/utils/guipopup/Bundle.properties'

//        keyStore {
//            keyStoreFile = 'private/keystore'
//            username = 'guipopup'
//            password = ''
//        }
}

def netbeansModule = { String groupName, String moduleName ->
    return [
        group: groupName,
        name: moduleName,
        version: netbeansVersion
    ]
}

def netbeansApi = { String moduleName ->
    return netbeansModule('org.netbeans.api', moduleName)
}

dependencies {
//    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
//        netbeans "org.netbeans.api:org-openide-awt:$netbeansVersion"
//        netbeans "org.netbeans.api:org-openide-util:$netbeansVersion"
//        netbeans "org.netbeans.api:org-netbeans-api-annotations-common:$netbeansVersion"
//    }

    providedCompile netbeansApi('org-openide-dialogs')
    providedCompile netbeansApi('org-openide-modules')
    providedCompile netbeansApi('org-openide-util-ui')
    providedCompile netbeansApi('org-openide-windows')
    // Optional dependency to bined netbeans plugin, requires bined-netbeans-plugin.jar in lib
    // Manually modify Info/info.xml and META-INF/MANIFEST.MF in module jar file to use OpenIDE-Module-Recommends
    // providedCompile (group: 'org.exbin.bined.netbeans', name: 'bined-netbeans-plugin', version: '0.2.4') {
    //    exclude group: 'org.netbeans.api'
    // }

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'com.bulenkov:darcula-2018.2'
    providedCompile ':dependencies'

    testImplementation 'junit:junit:4.13.2'
    providedRuntime netbeansModule('org.netbeans.modules', 'org-netbeans-modules-projectapi-nb')

    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        // Workaround for @javax.annotation.Generated
        // see: https://github.com/grpc/grpc-java/issues/3633
        implementation("javax.annotation:javax.annotation-api:1.3.2")
    }
}

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
        archiveClassifier = 'sources'
    } else {
    	classifier = 'sources'
    }

    duplicatesStrategy = 'exclude'
    from sourceSets.main.allSource
}

uploadArchives.dependsOn tasks.nbm
publish.dependsOn tasks.nbm
//artifacts {
//    archives jar
//    archives sourcesJar
//    tests testJar
//    archives (tasks.nbm.outputFile) {
//        name = "${project.name}-${project.version}"
//        extension = 'nbm'
//        type = 'nbm'
//    }
//}

task netBeansRun(type: Exec) {
    doFirst {
        def confFile = project.file("$project.buildDir/testuserdir/etc/netbeans.conf")
        confFile.parentFile.mkdirs()
        confFile.write "netbeans_extraclusters=\"$project.buildDir/module\""
    }

    workingDir "${project.buildDir}"

    def executable = System.getProperty('os.name').toLowerCase().contains('windows') ? 'netbeans.exe' : 'netbeans'
    if (project.hasProperty('netBeansInstallDir')) {
        executable = netBeansInstallDir + '/bin/' + executable
    } else {
        logger.warn('netBeansInstallDir property is not specified. Assuming \'netbeans\' executable is on PATH.')
    }
    commandLine executable, '--userdir', "$project.buildDir/testuserdir"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar {
                if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                    archiveClassifier = 'sources'
                } else {
                    classifier = 'sources'
                }
            }
            artifact (javadocJar) {
                if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                    archiveClassifier = 'javadoc'
                } else {
                    classifier = 'javadoc'
                }
            }
            artifact (nbmFile) {
                if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                    archiveClassifier = 'nbm'
                } else {
                    classifier = 'nbm'
                }
                extension = 'nbm'
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name deployName
                    pom.packaging 'nbm'
                    description deployDescription
                    url deployUrl
                    scm {
                        url "https://github.com/hajdam/${repositoryName}"
                        connection "cm:git:git://github.com/hajdam/${repositoryName}.git"
                        developerConnection "scm:git:git@github.com:hajdam/${repositoryName}.git"
                    }
                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    organization {
                        name 'ExBin Project'
                        url 'https://exbin.org/'
                    }
                    developers {
                        developer {
                            id 'HajdaM'
                            name 'Miroslav Hajda'
                            email 'hajdam@users.sf.net'
                        }
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

if (gradle.startParameter.taskNames.contains("uploadArchives") && !version.endsWith('-SNAPSHOT')) {

    configurations {
        releaseArtifacts {}
    }
    
    artifacts {
        archives javadocJar, sourcesJar

        archives (tasks.nbm.outputFile) {
            name = "${project.name}-${project.version}"
            extension = 'nbm'
            type = 'nbm'
        }

        releaseArtifacts jar
        releaseArtifacts (tasks.nbm.outputFile) {
            name = "${project.name}-${project.version}"
            extension = 'nbm'
            type = 'nbm'
        }
        releaseArtifacts javadocJar
        releaseArtifacts sourcesJar
    }

    signing {
        sign tasks.nbm.outputFile
        sign configurations.releaseArtifacts
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name deployName
                    packaging 'nbm'
                    description deployDescription
                    url deployUrl

                    scm {
                        url "https://github.com/hajdam/${repositoryName}"
                        connection "cm:git:git://github.com/hajdam/${repositoryName}.git"
                        developerConnection "scm:git:git@github.com:hajdam/${repositoryName}.git"
                    }
                    licenses {
                        license {
                            name 'Apache License, Version 2.0'
                            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    organization {
                        name 'ExBin Project'
                        url 'https://exbin.org/'
                    }
                    developers {
                        developer {
                            id 'HajdaM'
                            name 'Miroslav Hajda'
                            email 'hajdam@users.sf.net'
                        }
                    }
                }
            }
        }
    }
}
